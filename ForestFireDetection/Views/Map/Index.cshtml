@model List<ForestFireDetection.ViewModels.SensorWithLatestDataViewModel>

@{
    ViewData["Title"] = "Map";
}

<div class="row">
    <div class="col-md-12 mt-3">
        <div class="card card-success card-outline">
            <div class="card-header">
                <h3 class="card-title"><i class="fas fa-map"></i> Map</h3>
            </div>

            

            <div class="card-body">
                <!-- حقل البحث -->
                <div class="form-group" style="max-width: 250px;">
                    <div class="input-group">
                        <input type="search" id="sensorSearchInput" class="form-control form-control-m" placeholder="Enter Sensor ID" aria-label="Search">
                        <div class="input-group-append">
                            <button id="searchSensorBtn" type="submit" class="btn btn-m btn-default">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- الخريطة -->
                <div id="map" style="height: 500px;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="~/js/map.js"></script>
    <script src="~/js/sensor-charts.js"></script>

    <script>
        window.addEventListener('load', function () {
        @foreach (var sensor in Model)
        {
            <text>
                    updateSensorOnMap({
                        sensorId: "@sensor.SensorId",
                        latitude: @sensor.Latitude,
                        longitude: @sensor.Longitude,
                        temperature: @sensor.Temperature,
                        humidity: @sensor.Humidity,
                        smoke: @sensor.Smoke,
                        timestamp: "@sensor.Timestamp.ToString("o")",
                        sensorState: "@sensor.SensorState"
                    });
            </text>
        }
                });

        document.getElementById("searchSensorBtn").addEventListener("click", () => {
            const input = document.getElementById("sensorSearchInput").value.trim();
            if (!input) return;

            const marker = window.sensorMarkers?.[input];
            if (!marker) {
                alert("Sensor not found on map.");
                return;
            }

            const latLng = marker.getLatLng();
            if (window.map) {
                window.map.setView(latLng, 15);
                showSensorPanel(input);
            }
        });
    </script>
}
